// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5585.PowerUp2018.subsystems;

import org.usfirst.frc5585.PowerUp2018.Robot;
import org.usfirst.frc5585.PowerUp2018.RobotMap;
import org.usfirst.frc5585.PowerUp2018.commands.*;

import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.PWMTalonSRX;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveTrain extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftRear = RobotMap.driveTrainLeftRear;
    private final SpeedController leftFront = RobotMap.driveTrainLeftFront;
    private final SpeedController rightRear = RobotMap.driveTrainRightRear;
    private final SpeedController rightFront = RobotMap.driveTrainRightFront;
    private final RobotDrive robortDrive = RobotMap.driveTrainRobortDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	@Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ArcadeDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	/**
	 * Default arcade drive method. Uses joystick throttle to scale sensitivity
	 * and max output.
	 */
	public void arcadeDrive() {
		double speed = Robot.oi.joystick.getThrottle() * -0.2 + 0.8; // scaling
																		// var
		double x = Robot.oi.joystick.getX() * -speed; // scale and set x and y
		// double twist = Robot.oi.joystick.getTwist();
		double y = Robot.oi.joystick.getY() * -speed;
		robortDrive.arcadeDrive(y, x, true);// pass x and y to drivetrain
	}

	public void leftDrive() {
		double x = -1;
		double y = 0;
		robortDrive.arcadeDrive(y, x, true);
	}

	public void rightDrive() {
		double x = 1;
		double y = 0;
		robortDrive.arcadeDrive(y, x, true);
	}

	@Override
	public void periodic() {
		// Put code here to be run every loop

	}

	public void stop() {
		robortDrive.stopMotor();

	}
	// Put methods for controlling this subsystem
	// here. Call these from Commands.

}
